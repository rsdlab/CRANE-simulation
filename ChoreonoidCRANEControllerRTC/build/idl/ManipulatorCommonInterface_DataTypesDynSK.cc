// This file is generated by omniidl (C++ backend) - omniORB_4_1. Do not edit.

#include "ManipulatorCommonInterface_DataTypes.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_1_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::TypeCode_ptr _0RL_tc_JARA__ARM_mDoubleSeq = CORBA::TypeCode::PR_alias_tc("IDL:JARA_ARM/DoubleSeq:1.0", "DoubleSeq", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_double_tc(), &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace JARA_ARM { 
  const ::CORBA::TypeCode_ptr _tc_DoubleSeq = _0RL_tc_JARA__ARM_mDoubleSeq;
} 
#else
const ::CORBA::TypeCode_ptr JARA_ARM::_tc_DoubleSeq = _0RL_tc_JARA__ARM_mDoubleSeq;
#endif

static CORBA::TypeCode_ptr _0RL_tc_JARA__ARM_mJointPos = CORBA::TypeCode::PR_alias_tc("IDL:JARA_ARM/JointPos:1.0", "JointPos", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_double_tc(), &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace JARA_ARM { 
  const ::CORBA::TypeCode_ptr _tc_JointPos = _0RL_tc_JARA__ARM_mJointPos;
} 
#else
const ::CORBA::TypeCode_ptr JARA_ARM::_tc_JointPos = _0RL_tc_JARA__ARM_mJointPos;
#endif

static CORBA::PR_structMember _0RL_structmember_JARA__ARM_mLimitValue[] = {
  {"upper", CORBA::TypeCode::PR_double_tc()},
  {"lower", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_JARA__ARM_mLimitValue
#  undef _0RL_tc_JARA__ARM_mLimitValue
#endif
static CORBA::TypeCode_ptr _0RL_tc_JARA__ARM_mLimitValue = CORBA::TypeCode::PR_struct_tc("IDL:JARA_ARM/LimitValue:1.0", "LimitValue", _0RL_structmember_JARA__ARM_mLimitValue, 2, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace JARA_ARM { 
  const ::CORBA::TypeCode_ptr _tc_LimitValue = _0RL_tc_JARA__ARM_mLimitValue;
} 
#else
const ::CORBA::TypeCode_ptr JARA_ARM::_tc_LimitValue = _0RL_tc_JARA__ARM_mLimitValue;
#endif


static CORBA::PR_structMember _0RL_structmember_JARA__ARM_mRETURN__ID[] = {
  {"id", CORBA::TypeCode::PR_long_tc()},
  {"comment", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)}
};

#ifdef _0RL_tc_JARA__ARM_mRETURN__ID
#  undef _0RL_tc_JARA__ARM_mRETURN__ID
#endif
static CORBA::TypeCode_ptr _0RL_tc_JARA__ARM_mRETURN__ID = CORBA::TypeCode::PR_struct_tc("IDL:JARA_ARM/RETURN_ID:1.0", "RETURN_ID", _0RL_structmember_JARA__ARM_mRETURN__ID, 2, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace JARA_ARM { 
  const ::CORBA::TypeCode_ptr _tc_RETURN_ID = _0RL_tc_JARA__ARM_mRETURN__ID;
} 
#else
const ::CORBA::TypeCode_ptr JARA_ARM::_tc_RETURN_ID = _0RL_tc_JARA__ARM_mRETURN__ID;
#endif


static CORBA::PR_structMember _0RL_structmember_RTC_mTime[] = {
  {"sec", CORBA::TypeCode::PR_ulong_tc()},
  {"nsec", CORBA::TypeCode::PR_ulong_tc()}
};

#ifdef _0RL_tc_RTC_mTime
#  undef _0RL_tc_RTC_mTime
#endif
static CORBA::TypeCode_ptr _0RL_tc_RTC_mTime = CORBA::TypeCode::PR_struct_tc("IDL:RTC/Time:1.0", "Time", _0RL_structmember_RTC_mTime, 2, &_0RL_tcTrack);

static CORBA::PR_structMember _0RL_structmember_JARA__ARM_mTimedJointPos[] = {
  {"tm", _0RL_tc_RTC_mTime},
  {"pos", _0RL_tc_JARA__ARM_mJointPos}
};

#ifdef _0RL_tc_JARA__ARM_mTimedJointPos
#  undef _0RL_tc_JARA__ARM_mTimedJointPos
#endif
static CORBA::TypeCode_ptr _0RL_tc_JARA__ARM_mTimedJointPos = CORBA::TypeCode::PR_struct_tc("IDL:JARA_ARM/TimedJointPos:1.0", "TimedJointPos", _0RL_structmember_JARA__ARM_mTimedJointPos, 2, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace JARA_ARM { 
  const ::CORBA::TypeCode_ptr _tc_TimedJointPos = _0RL_tc_JARA__ARM_mTimedJointPos;
} 
#else
const ::CORBA::TypeCode_ptr JARA_ARM::_tc_TimedJointPos = _0RL_tc_JARA__ARM_mTimedJointPos;
#endif


static CORBA::TypeCode_ptr _0RL_tc_JARA__ARM_mULONG = CORBA::TypeCode::PR_alias_tc("IDL:JARA_ARM/ULONG:1.0", "ULONG", CORBA::TypeCode::PR_ulong_tc(), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace JARA_ARM { 
  const ::CORBA::TypeCode_ptr _tc_ULONG = _0RL_tc_JARA__ARM_mULONG;
} 
#else
const ::CORBA::TypeCode_ptr JARA_ARM::_tc_ULONG = _0RL_tc_JARA__ARM_mULONG;
#endif

static void _0RL_JARA__ARM_mDoubleSeq_marshal_fn(cdrStream& _s, void* _v)
{
  JARA_ARM::DoubleSeq* _p = (JARA_ARM::DoubleSeq*)_v;
  *_p >>= _s;
}
static void _0RL_JARA__ARM_mDoubleSeq_unmarshal_fn(cdrStream& _s, void*& _v)
{
  JARA_ARM::DoubleSeq* _p = new JARA_ARM::DoubleSeq;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_JARA__ARM_mDoubleSeq_destructor_fn(void* _v)
{
  JARA_ARM::DoubleSeq* _p = (JARA_ARM::DoubleSeq*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const JARA_ARM::DoubleSeq& _s)
{
  JARA_ARM::DoubleSeq* _p = new JARA_ARM::DoubleSeq(_s);
  _a.PR_insert(_0RL_tc_JARA__ARM_mDoubleSeq,
               _0RL_JARA__ARM_mDoubleSeq_marshal_fn,
               _0RL_JARA__ARM_mDoubleSeq_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, JARA_ARM::DoubleSeq* _sp)
{
  _a.PR_insert(_0RL_tc_JARA__ARM_mDoubleSeq,
               _0RL_JARA__ARM_mDoubleSeq_marshal_fn,
               _0RL_JARA__ARM_mDoubleSeq_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, JARA_ARM::DoubleSeq*& _sp)
{
  return _a >>= (const JARA_ARM::DoubleSeq*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const JARA_ARM::DoubleSeq*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_JARA__ARM_mDoubleSeq,
                    _0RL_JARA__ARM_mDoubleSeq_unmarshal_fn,
                    _0RL_JARA__ARM_mDoubleSeq_marshal_fn,
                    _0RL_JARA__ARM_mDoubleSeq_destructor_fn,
                    _v)) {
    _sp = (const JARA_ARM::DoubleSeq*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_JARA__ARM_mJointPos_marshal_fn(cdrStream& _s, void* _v)
{
  JARA_ARM::JointPos* _p = (JARA_ARM::JointPos*)_v;
  *_p >>= _s;
}
static void _0RL_JARA__ARM_mJointPos_unmarshal_fn(cdrStream& _s, void*& _v)
{
  JARA_ARM::JointPos* _p = new JARA_ARM::JointPos;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_JARA__ARM_mJointPos_destructor_fn(void* _v)
{
  JARA_ARM::JointPos* _p = (JARA_ARM::JointPos*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const JARA_ARM::JointPos& _s)
{
  JARA_ARM::JointPos* _p = new JARA_ARM::JointPos(_s);
  _a.PR_insert(_0RL_tc_JARA__ARM_mJointPos,
               _0RL_JARA__ARM_mJointPos_marshal_fn,
               _0RL_JARA__ARM_mJointPos_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, JARA_ARM::JointPos* _sp)
{
  _a.PR_insert(_0RL_tc_JARA__ARM_mJointPos,
               _0RL_JARA__ARM_mJointPos_marshal_fn,
               _0RL_JARA__ARM_mJointPos_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, JARA_ARM::JointPos*& _sp)
{
  return _a >>= (const JARA_ARM::JointPos*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const JARA_ARM::JointPos*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_JARA__ARM_mJointPos,
                    _0RL_JARA__ARM_mJointPos_unmarshal_fn,
                    _0RL_JARA__ARM_mJointPos_marshal_fn,
                    _0RL_JARA__ARM_mJointPos_destructor_fn,
                    _v)) {
    _sp = (const JARA_ARM::JointPos*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_JARA__ARM_mLimitValue_marshal_fn(cdrStream& _s, void* _v)
{
  JARA_ARM::LimitValue* _p = (JARA_ARM::LimitValue*)_v;
  *_p >>= _s;
}
static void _0RL_JARA__ARM_mLimitValue_unmarshal_fn(cdrStream& _s, void*& _v)
{
  JARA_ARM::LimitValue* _p = new JARA_ARM::LimitValue;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_JARA__ARM_mLimitValue_destructor_fn(void* _v)
{
  JARA_ARM::LimitValue* _p = (JARA_ARM::LimitValue*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const JARA_ARM::LimitValue& _s)
{
  JARA_ARM::LimitValue* _p = new JARA_ARM::LimitValue(_s);
  _a.PR_insert(_0RL_tc_JARA__ARM_mLimitValue,
               _0RL_JARA__ARM_mLimitValue_marshal_fn,
               _0RL_JARA__ARM_mLimitValue_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, JARA_ARM::LimitValue* _sp)
{
  _a.PR_insert(_0RL_tc_JARA__ARM_mLimitValue,
               _0RL_JARA__ARM_mLimitValue_marshal_fn,
               _0RL_JARA__ARM_mLimitValue_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, JARA_ARM::LimitValue*& _sp)
{
  return _a >>= (const JARA_ARM::LimitValue*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const JARA_ARM::LimitValue*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_JARA__ARM_mLimitValue,
                    _0RL_JARA__ARM_mLimitValue_unmarshal_fn,
                    _0RL_JARA__ARM_mLimitValue_marshal_fn,
                    _0RL_JARA__ARM_mLimitValue_destructor_fn,
                    _v)) {
    _sp = (const JARA_ARM::LimitValue*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_JARA__ARM_mRETURN__ID_marshal_fn(cdrStream& _s, void* _v)
{
  JARA_ARM::RETURN_ID* _p = (JARA_ARM::RETURN_ID*)_v;
  *_p >>= _s;
}
static void _0RL_JARA__ARM_mRETURN__ID_unmarshal_fn(cdrStream& _s, void*& _v)
{
  JARA_ARM::RETURN_ID* _p = new JARA_ARM::RETURN_ID;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_JARA__ARM_mRETURN__ID_destructor_fn(void* _v)
{
  JARA_ARM::RETURN_ID* _p = (JARA_ARM::RETURN_ID*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const JARA_ARM::RETURN_ID& _s)
{
  JARA_ARM::RETURN_ID* _p = new JARA_ARM::RETURN_ID(_s);
  _a.PR_insert(_0RL_tc_JARA__ARM_mRETURN__ID,
               _0RL_JARA__ARM_mRETURN__ID_marshal_fn,
               _0RL_JARA__ARM_mRETURN__ID_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, JARA_ARM::RETURN_ID* _sp)
{
  _a.PR_insert(_0RL_tc_JARA__ARM_mRETURN__ID,
               _0RL_JARA__ARM_mRETURN__ID_marshal_fn,
               _0RL_JARA__ARM_mRETURN__ID_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, JARA_ARM::RETURN_ID*& _sp)
{
  return _a >>= (const JARA_ARM::RETURN_ID*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const JARA_ARM::RETURN_ID*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_JARA__ARM_mRETURN__ID,
                    _0RL_JARA__ARM_mRETURN__ID_unmarshal_fn,
                    _0RL_JARA__ARM_mRETURN__ID_marshal_fn,
                    _0RL_JARA__ARM_mRETURN__ID_destructor_fn,
                    _v)) {
    _sp = (const JARA_ARM::RETURN_ID*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_JARA__ARM_mTimedJointPos_marshal_fn(cdrStream& _s, void* _v)
{
  JARA_ARM::TimedJointPos* _p = (JARA_ARM::TimedJointPos*)_v;
  *_p >>= _s;
}
static void _0RL_JARA__ARM_mTimedJointPos_unmarshal_fn(cdrStream& _s, void*& _v)
{
  JARA_ARM::TimedJointPos* _p = new JARA_ARM::TimedJointPos;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_JARA__ARM_mTimedJointPos_destructor_fn(void* _v)
{
  JARA_ARM::TimedJointPos* _p = (JARA_ARM::TimedJointPos*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const JARA_ARM::TimedJointPos& _s)
{
  JARA_ARM::TimedJointPos* _p = new JARA_ARM::TimedJointPos(_s);
  _a.PR_insert(_0RL_tc_JARA__ARM_mTimedJointPos,
               _0RL_JARA__ARM_mTimedJointPos_marshal_fn,
               _0RL_JARA__ARM_mTimedJointPos_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, JARA_ARM::TimedJointPos* _sp)
{
  _a.PR_insert(_0RL_tc_JARA__ARM_mTimedJointPos,
               _0RL_JARA__ARM_mTimedJointPos_marshal_fn,
               _0RL_JARA__ARM_mTimedJointPos_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, JARA_ARM::TimedJointPos*& _sp)
{
  return _a >>= (const JARA_ARM::TimedJointPos*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const JARA_ARM::TimedJointPos*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_JARA__ARM_mTimedJointPos,
                    _0RL_JARA__ARM_mTimedJointPos_unmarshal_fn,
                    _0RL_JARA__ARM_mTimedJointPos_marshal_fn,
                    _0RL_JARA__ARM_mTimedJointPos_destructor_fn,
                    _v)) {
    _sp = (const JARA_ARM::TimedJointPos*)_v;
    return 1;
  }
  return 0;
}

