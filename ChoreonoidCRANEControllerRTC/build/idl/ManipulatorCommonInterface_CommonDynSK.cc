// This file is generated by omniidl (C++ backend) - omniORB_4_1. Do not edit.

#include "ManipulatorCommonInterface_Common.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_1_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static const char* _0RL_enumMember_JARA__ARM_mAlarmType[] = { "FAULT", "WARNING", "UNKNOWN" };
static CORBA::TypeCode_ptr _0RL_tc_JARA__ARM_mAlarmType = CORBA::TypeCode::PR_enum_tc("IDL:JARA_ARM/AlarmType:1.0", "AlarmType", _0RL_enumMember_JARA__ARM_mAlarmType, 3, &_0RL_tcTrack);
#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace JARA_ARM { 
  const ::CORBA::TypeCode_ptr _tc_AlarmType = _0RL_tc_JARA__ARM_mAlarmType;
} 
#else
const ::CORBA::TypeCode_ptr JARA_ARM::_tc_AlarmType = _0RL_tc_JARA__ARM_mAlarmType;
#endif

static CORBA::PR_structMember _0RL_structmember_JARA__ARM_mAlarm[] = {
  {"code", CORBA::TypeCode::PR_ulong_tc()},
  {"type", _0RL_tc_JARA__ARM_mAlarmType},
  {"description", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)}
};

#ifdef _0RL_tc_JARA__ARM_mAlarm
#  undef _0RL_tc_JARA__ARM_mAlarm
#endif
static CORBA::TypeCode_ptr _0RL_tc_JARA__ARM_mAlarm = CORBA::TypeCode::PR_struct_tc("IDL:JARA_ARM/Alarm:1.0", "Alarm", _0RL_structmember_JARA__ARM_mAlarm, 3, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace JARA_ARM { 
  const ::CORBA::TypeCode_ptr _tc_Alarm = _0RL_tc_JARA__ARM_mAlarm;
} 
#else
const ::CORBA::TypeCode_ptr JARA_ARM::_tc_Alarm = _0RL_tc_JARA__ARM_mAlarm;
#endif






static CORBA::TypeCode_ptr _0RL_tc_JARA__ARM_mAlarmSeq = CORBA::TypeCode::PR_alias_tc("IDL:JARA_ARM/AlarmSeq:1.0", "AlarmSeq", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_JARA__ARM_mAlarm, &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace JARA_ARM { 
  const ::CORBA::TypeCode_ptr _tc_AlarmSeq = _0RL_tc_JARA__ARM_mAlarmSeq;
} 
#else
const ::CORBA::TypeCode_ptr JARA_ARM::_tc_AlarmSeq = _0RL_tc_JARA__ARM_mAlarmSeq;
#endif

static CORBA::PR_structMember _0RL_structmember_JARA__ARM_mLimitValue[] = {
  {"upper", CORBA::TypeCode::PR_double_tc()},
  {"lower", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_JARA__ARM_mLimitValue
#  undef _0RL_tc_JARA__ARM_mLimitValue
#endif
static CORBA::TypeCode_ptr _0RL_tc_JARA__ARM_mLimitValue = CORBA::TypeCode::PR_struct_tc("IDL:JARA_ARM/LimitValue:1.0", "LimitValue", _0RL_structmember_JARA__ARM_mLimitValue, 2, &_0RL_tcTrack);




static CORBA::TypeCode_ptr _0RL_tc_JARA__ARM_mLimitSeq = CORBA::TypeCode::PR_alias_tc("IDL:JARA_ARM/LimitSeq:1.0", "LimitSeq", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_JARA__ARM_mLimitValue, &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace JARA_ARM { 
  const ::CORBA::TypeCode_ptr _tc_LimitSeq = _0RL_tc_JARA__ARM_mLimitSeq;
} 
#else
const ::CORBA::TypeCode_ptr JARA_ARM::_tc_LimitSeq = _0RL_tc_JARA__ARM_mLimitSeq;
#endif

static CORBA::TypeCode_ptr _0RL_tc_JARA__ARM_mULONG = CORBA::TypeCode::PR_alias_tc("IDL:JARA_ARM/ULONG:1.0", "ULONG", CORBA::TypeCode::PR_ulong_tc(), &_0RL_tcTrack);


static CORBA::PR_structMember _0RL_structmember_JARA__ARM_mManipInfo[] = {
  {"manufactur", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"type", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"axisNum", _0RL_tc_JARA__ARM_mULONG},
  {"cmdCycle", _0RL_tc_JARA__ARM_mULONG},
  {"isGripper", CORBA::TypeCode::PR_boolean_tc()}
};

#ifdef _0RL_tc_JARA__ARM_mManipInfo
#  undef _0RL_tc_JARA__ARM_mManipInfo
#endif
static CORBA::TypeCode_ptr _0RL_tc_JARA__ARM_mManipInfo = CORBA::TypeCode::PR_struct_tc("IDL:JARA_ARM/ManipInfo:1.0", "ManipInfo", _0RL_structmember_JARA__ARM_mManipInfo, 5, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace JARA_ARM { 
  const ::CORBA::TypeCode_ptr _tc_ManipInfo = _0RL_tc_JARA__ARM_mManipInfo;
} 
#else
const ::CORBA::TypeCode_ptr JARA_ARM::_tc_ManipInfo = _0RL_tc_JARA__ARM_mManipInfo;
#endif


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace JARA_ARM { 
  const ::CORBA::TypeCode_ptr _tc_ManipulatorCommonInterface_Common = CORBA::TypeCode::PR_interface_tc("IDL:JARA_ARM/ManipulatorCommonInterface_Common:1.0", "ManipulatorCommonInterface_Common", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr JARA_ARM::_tc_ManipulatorCommonInterface_Common = CORBA::TypeCode::PR_interface_tc("IDL:JARA_ARM/ManipulatorCommonInterface_Common:1.0", "ManipulatorCommonInterface_Common", &_0RL_tcTrack);
#endif

static void _0RL_JARA__ARM_mAlarmType_marshal_fn(cdrStream& _s, void* _v)
{
  JARA_ARM::AlarmType* _p = (JARA_ARM::AlarmType*)_v;
  *_p >>= _s;
}
static void _0RL_JARA__ARM_mAlarmType_unmarshal_fn(cdrStream& _s, void*& _v)
{
  JARA_ARM::AlarmType* _p = (JARA_ARM::AlarmType*)_v;
  *_p <<= _s;
}

void operator<<=(::CORBA::Any& _a, JARA_ARM::AlarmType _s)
{
  _a.PR_insert(_0RL_tc_JARA__ARM_mAlarmType,
               _0RL_JARA__ARM_mAlarmType_marshal_fn,
               &_s);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, JARA_ARM::AlarmType& _s)
{
  return _a.PR_extract(_0RL_tc_JARA__ARM_mAlarmType,
                       _0RL_JARA__ARM_mAlarmType_unmarshal_fn,
                       &_s);
}

static void _0RL_JARA__ARM_mAlarm_marshal_fn(cdrStream& _s, void* _v)
{
  JARA_ARM::Alarm* _p = (JARA_ARM::Alarm*)_v;
  *_p >>= _s;
}
static void _0RL_JARA__ARM_mAlarm_unmarshal_fn(cdrStream& _s, void*& _v)
{
  JARA_ARM::Alarm* _p = new JARA_ARM::Alarm;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_JARA__ARM_mAlarm_destructor_fn(void* _v)
{
  JARA_ARM::Alarm* _p = (JARA_ARM::Alarm*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const JARA_ARM::Alarm& _s)
{
  JARA_ARM::Alarm* _p = new JARA_ARM::Alarm(_s);
  _a.PR_insert(_0RL_tc_JARA__ARM_mAlarm,
               _0RL_JARA__ARM_mAlarm_marshal_fn,
               _0RL_JARA__ARM_mAlarm_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, JARA_ARM::Alarm* _sp)
{
  _a.PR_insert(_0RL_tc_JARA__ARM_mAlarm,
               _0RL_JARA__ARM_mAlarm_marshal_fn,
               _0RL_JARA__ARM_mAlarm_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, JARA_ARM::Alarm*& _sp)
{
  return _a >>= (const JARA_ARM::Alarm*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const JARA_ARM::Alarm*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_JARA__ARM_mAlarm,
                    _0RL_JARA__ARM_mAlarm_unmarshal_fn,
                    _0RL_JARA__ARM_mAlarm_marshal_fn,
                    _0RL_JARA__ARM_mAlarm_destructor_fn,
                    _v)) {
    _sp = (const JARA_ARM::Alarm*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_JARA__ARM_mAlarmSeq_marshal_fn(cdrStream& _s, void* _v)
{
  JARA_ARM::AlarmSeq* _p = (JARA_ARM::AlarmSeq*)_v;
  *_p >>= _s;
}
static void _0RL_JARA__ARM_mAlarmSeq_unmarshal_fn(cdrStream& _s, void*& _v)
{
  JARA_ARM::AlarmSeq* _p = new JARA_ARM::AlarmSeq;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_JARA__ARM_mAlarmSeq_destructor_fn(void* _v)
{
  JARA_ARM::AlarmSeq* _p = (JARA_ARM::AlarmSeq*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const JARA_ARM::AlarmSeq& _s)
{
  JARA_ARM::AlarmSeq* _p = new JARA_ARM::AlarmSeq(_s);
  _a.PR_insert(_0RL_tc_JARA__ARM_mAlarmSeq,
               _0RL_JARA__ARM_mAlarmSeq_marshal_fn,
               _0RL_JARA__ARM_mAlarmSeq_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, JARA_ARM::AlarmSeq* _sp)
{
  _a.PR_insert(_0RL_tc_JARA__ARM_mAlarmSeq,
               _0RL_JARA__ARM_mAlarmSeq_marshal_fn,
               _0RL_JARA__ARM_mAlarmSeq_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, JARA_ARM::AlarmSeq*& _sp)
{
  return _a >>= (const JARA_ARM::AlarmSeq*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const JARA_ARM::AlarmSeq*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_JARA__ARM_mAlarmSeq,
                    _0RL_JARA__ARM_mAlarmSeq_unmarshal_fn,
                    _0RL_JARA__ARM_mAlarmSeq_marshal_fn,
                    _0RL_JARA__ARM_mAlarmSeq_destructor_fn,
                    _v)) {
    _sp = (const JARA_ARM::AlarmSeq*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_JARA__ARM_mLimitSeq_marshal_fn(cdrStream& _s, void* _v)
{
  JARA_ARM::LimitSeq* _p = (JARA_ARM::LimitSeq*)_v;
  *_p >>= _s;
}
static void _0RL_JARA__ARM_mLimitSeq_unmarshal_fn(cdrStream& _s, void*& _v)
{
  JARA_ARM::LimitSeq* _p = new JARA_ARM::LimitSeq;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_JARA__ARM_mLimitSeq_destructor_fn(void* _v)
{
  JARA_ARM::LimitSeq* _p = (JARA_ARM::LimitSeq*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const JARA_ARM::LimitSeq& _s)
{
  JARA_ARM::LimitSeq* _p = new JARA_ARM::LimitSeq(_s);
  _a.PR_insert(_0RL_tc_JARA__ARM_mLimitSeq,
               _0RL_JARA__ARM_mLimitSeq_marshal_fn,
               _0RL_JARA__ARM_mLimitSeq_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, JARA_ARM::LimitSeq* _sp)
{
  _a.PR_insert(_0RL_tc_JARA__ARM_mLimitSeq,
               _0RL_JARA__ARM_mLimitSeq_marshal_fn,
               _0RL_JARA__ARM_mLimitSeq_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, JARA_ARM::LimitSeq*& _sp)
{
  return _a >>= (const JARA_ARM::LimitSeq*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const JARA_ARM::LimitSeq*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_JARA__ARM_mLimitSeq,
                    _0RL_JARA__ARM_mLimitSeq_unmarshal_fn,
                    _0RL_JARA__ARM_mLimitSeq_marshal_fn,
                    _0RL_JARA__ARM_mLimitSeq_destructor_fn,
                    _v)) {
    _sp = (const JARA_ARM::LimitSeq*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_JARA__ARM_mManipInfo_marshal_fn(cdrStream& _s, void* _v)
{
  JARA_ARM::ManipInfo* _p = (JARA_ARM::ManipInfo*)_v;
  *_p >>= _s;
}
static void _0RL_JARA__ARM_mManipInfo_unmarshal_fn(cdrStream& _s, void*& _v)
{
  JARA_ARM::ManipInfo* _p = new JARA_ARM::ManipInfo;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_JARA__ARM_mManipInfo_destructor_fn(void* _v)
{
  JARA_ARM::ManipInfo* _p = (JARA_ARM::ManipInfo*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const JARA_ARM::ManipInfo& _s)
{
  JARA_ARM::ManipInfo* _p = new JARA_ARM::ManipInfo(_s);
  _a.PR_insert(_0RL_tc_JARA__ARM_mManipInfo,
               _0RL_JARA__ARM_mManipInfo_marshal_fn,
               _0RL_JARA__ARM_mManipInfo_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, JARA_ARM::ManipInfo* _sp)
{
  _a.PR_insert(_0RL_tc_JARA__ARM_mManipInfo,
               _0RL_JARA__ARM_mManipInfo_marshal_fn,
               _0RL_JARA__ARM_mManipInfo_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, JARA_ARM::ManipInfo*& _sp)
{
  return _a >>= (const JARA_ARM::ManipInfo*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const JARA_ARM::ManipInfo*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_JARA__ARM_mManipInfo,
                    _0RL_JARA__ARM_mManipInfo_unmarshal_fn,
                    _0RL_JARA__ARM_mManipInfo_marshal_fn,
                    _0RL_JARA__ARM_mManipInfo_destructor_fn,
                    _v)) {
    _sp = (const JARA_ARM::ManipInfo*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_JARA__ARM_mManipulatorCommonInterface__Common_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_JARA__ARM_mManipulatorCommonInterface__Common_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(JARA_ARM::ManipulatorCommonInterface_Common::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_JARA__ARM_mManipulatorCommonInterface__Common_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, JARA_ARM::ManipulatorCommonInterface_Common_ptr _o)
{
  JARA_ARM::ManipulatorCommonInterface_Common_ptr _no = JARA_ARM::ManipulatorCommonInterface_Common::_duplicate(_o);
  _a.PR_insert(JARA_ARM::_tc_ManipulatorCommonInterface_Common,
               _0RL_JARA__ARM_mManipulatorCommonInterface__Common_marshal_fn,
               _0RL_JARA__ARM_mManipulatorCommonInterface__Common_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, JARA_ARM::ManipulatorCommonInterface_Common_ptr* _op)
{
  _a.PR_insert(JARA_ARM::_tc_ManipulatorCommonInterface_Common,
               _0RL_JARA__ARM_mManipulatorCommonInterface__Common_marshal_fn,
               _0RL_JARA__ARM_mManipulatorCommonInterface__Common_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = JARA_ARM::ManipulatorCommonInterface_Common::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, JARA_ARM::ManipulatorCommonInterface_Common_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(JARA_ARM::_tc_ManipulatorCommonInterface_Common,
                    _0RL_JARA__ARM_mManipulatorCommonInterface__Common_unmarshal_fn,
                    _0RL_JARA__ARM_mManipulatorCommonInterface__Common_marshal_fn,
                    _0RL_JARA__ARM_mManipulatorCommonInterface__Common_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (JARA_ARM::ManipulatorCommonInterface_Common_ptr)_r->_ptrToObjRef(JARA_ARM::ManipulatorCommonInterface_Common::_PD_repoId);
    else
      _o = JARA_ARM::ManipulatorCommonInterface_Common::_nil();
    return 1;
  }
  return 0;
}

