// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __ManipulatorCommonInterface__MiddleLevel_hh__
#define __ManipulatorCommonInterface__MiddleLevel_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_ManipulatorCommonInterface__MiddleLevel
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_ManipulatorCommonInterface__MiddleLevel
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_ManipulatorCommonInterface__MiddleLevel
#endif



#ifndef __BasicDataType_hh_EXTERNAL_GUARD__
#define __BasicDataType_hh_EXTERNAL_GUARD__
#include "BasicDataType.hh"
#endif
#ifndef __ManipulatorCommonInterface__DataTypes_hh_EXTERNAL_GUARD__
#define __ManipulatorCommonInterface__DataTypes_hh_EXTERNAL_GUARD__
#include "ManipulatorCommonInterface_DataTypes.hh"
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE JARA_ARM

_CORBA_MODULE_BEG

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_HgMatrix;

  typedef ::CORBA::Double HgMatrix[3][4];
  typedef ::CORBA::Double HgMatrix_slice[4];

  _CORBA_MODULE_INLINE HgMatrix_slice* HgMatrix_alloc() {
    return new HgMatrix_slice[3];
  }

  _CORBA_MODULE_INLINE HgMatrix_slice* HgMatrix_dup(const HgMatrix_slice* _s) {
    if (!_s) return 0;
    HgMatrix_slice* _data = HgMatrix_alloc();
    if (_data) {
      for (_CORBA_ULong _0i0 = 0; _0i0 < 3; _0i0++){
        for (_CORBA_ULong _0i1 = 0; _0i1 < 4; _0i1++){
          
          _data[_0i0][_0i1] = _s[_0i0][_0i1];

        }
      }
  
    }
    return _data;
  }

  _CORBA_MODULE_INLINE void HgMatrix_copy(HgMatrix_slice* _to, const HgMatrix_slice* _from){
    for (_CORBA_ULong _0i0 = 0; _0i0 < 3; _0i0++){
      for (_CORBA_ULong _0i1 = 0; _0i1 < 4; _0i1++){
        
        _to[_0i0][_0i1] = _from[_0i0][_0i1];

      }
    }
  
  }

  _CORBA_MODULE_INLINE void HgMatrix_free(HgMatrix_slice* _s) {
    delete [] _s;
  }

  class HgMatrix_copyHelper {
  public:
    static inline HgMatrix_slice* alloc() { return ::JARA_ARM::HgMatrix_alloc(); }
    static inline HgMatrix_slice* dup(const HgMatrix_slice* p) { return ::JARA_ARM::HgMatrix_dup(p); }
    static inline void free(HgMatrix_slice* p) { ::JARA_ARM::HgMatrix_free(p); }
  };

  typedef _CORBA_Array_Fix_Var<HgMatrix_copyHelper,HgMatrix_slice> HgMatrix_var;
  typedef _CORBA_Array_Fix_Forany<HgMatrix_copyHelper,HgMatrix_slice> HgMatrix_forany;

  typedef HgMatrix_slice* HgMatrix_out;

  struct CarPosWithElbow {
    typedef _CORBA_ConstrType_Fix_Var<CarPosWithElbow> _var_type;

    
    HgMatrix carPos;

    ::CORBA::Double elbow;

    ULONG structFlag;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef CarPosWithElbow::_var_type CarPosWithElbow_var;

  typedef CarPosWithElbow& CarPosWithElbow_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_CarPosWithElbow;

  struct CartesianSpeed {
    typedef _CORBA_ConstrType_Fix_Var<CartesianSpeed> _var_type;

    
    ::CORBA::Double translation;

    ::CORBA::Double rotation;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef CartesianSpeed::_var_type CartesianSpeed_var;

  typedef CartesianSpeed& CartesianSpeed_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_CartesianSpeed;

#ifndef __JARA__ARM_mManipulatorCommonInterface__Middle__
#define __JARA__ARM_mManipulatorCommonInterface__Middle__

  class ManipulatorCommonInterface_Middle;
  class _objref_ManipulatorCommonInterface_Middle;
  class _impl_ManipulatorCommonInterface_Middle;
  
  typedef _objref_ManipulatorCommonInterface_Middle* ManipulatorCommonInterface_Middle_ptr;
  typedef ManipulatorCommonInterface_Middle_ptr ManipulatorCommonInterface_MiddleRef;

  class ManipulatorCommonInterface_Middle_Helper {
  public:
    typedef ManipulatorCommonInterface_Middle_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_ManipulatorCommonInterface_Middle, ManipulatorCommonInterface_Middle_Helper> ManipulatorCommonInterface_Middle_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_ManipulatorCommonInterface_Middle,ManipulatorCommonInterface_Middle_Helper > ManipulatorCommonInterface_Middle_out;

#endif

  // interface ManipulatorCommonInterface_Middle
  class ManipulatorCommonInterface_Middle {
  public:
    // Declarations for this interface type.
    typedef ManipulatorCommonInterface_Middle_ptr _ptr_type;
    typedef ManipulatorCommonInterface_Middle_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_ManipulatorCommonInterface_Middle :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    RETURN_ID* closeGripper();
    RETURN_ID* getBaseOffset(::JARA_ARM::HgMatrix offset);
    RETURN_ID* getFeedbackPosCartesian(::JARA_ARM::CarPosWithElbow& pos);
    RETURN_ID* getMaxSpeedCartesian(::JARA_ARM::CartesianSpeed& speed);
    RETURN_ID* getMaxSpeedJoint(::JARA_ARM::DoubleSeq_out speed);
    RETURN_ID* getMinAccelTimeCartesian(::CORBA::Double& aclTime);
    RETURN_ID* getMinAccelTimeJoint(::CORBA::Double& aclTime);
    RETURN_ID* getSoftLimitCartesian(::JARA_ARM::LimitValue& xLimit, ::JARA_ARM::LimitValue& yLimit, ::JARA_ARM::LimitValue& zLimit);
    RETURN_ID* moveGripper(::JARA_ARM::ULONG angleRatio);
    RETURN_ID* moveLinearCartesianAbs(const ::JARA_ARM::CarPosWithElbow& carPoint);
    RETURN_ID* moveLinearCartesianRel(const ::JARA_ARM::CarPosWithElbow& carPoint);
    RETURN_ID* movePTPCartesianAbs(const ::JARA_ARM::CarPosWithElbow& carPoint);
    RETURN_ID* movePTPCartesianRel(const ::JARA_ARM::CarPosWithElbow& carPoint);
    RETURN_ID* movePTPJointAbs(const ::JARA_ARM::JointPos& jointPoints);
    RETURN_ID* movePTPJointRel(const ::JARA_ARM::JointPos& jointPoints);
    RETURN_ID* openGripper();
    RETURN_ID* pause();
    RETURN_ID* resume();
    RETURN_ID* stop();
    RETURN_ID* setAccelTimeCartesian(::CORBA::Double aclTime);
    RETURN_ID* setAccelTimeJoint(::CORBA::Double aclTime);
    RETURN_ID* setBaseOffset(const ::JARA_ARM::HgMatrix offset);
    RETURN_ID* setControlPointOffset(const ::JARA_ARM::HgMatrix offset);
    RETURN_ID* setMaxSpeedCartesian(const ::JARA_ARM::CartesianSpeed& speed);
    RETURN_ID* setMaxSpeedJoint(const ::JARA_ARM::DoubleSeq& speed);
    RETURN_ID* setMinAccelTimeCartesian(::CORBA::Double aclTime);
    RETURN_ID* setMinAccelTimeJoint(::CORBA::Double aclTime);
    RETURN_ID* setSoftLimitCartesian(const ::JARA_ARM::LimitValue& xLimit, const ::JARA_ARM::LimitValue& yLimit, const ::JARA_ARM::LimitValue& zLimit);
    RETURN_ID* setSpeedCartesian(::JARA_ARM::ULONG spdRatio);
    RETURN_ID* setSpeedJoint(::JARA_ARM::ULONG spdRatio);
    RETURN_ID* moveCircularCartesianAbs(const ::JARA_ARM::CarPosWithElbow& carPointR, const ::JARA_ARM::CarPosWithElbow& carPointT);
    RETURN_ID* moveCircularCartesianRel(const ::JARA_ARM::CarPosWithElbow& carPointR, const ::JARA_ARM::CarPosWithElbow& carPointT);
    RETURN_ID* setHome(const ::JARA_ARM::JointPos& jointPoint);
    RETURN_ID* getHome(::JARA_ARM::JointPos_out jointPoint);
    RETURN_ID* goHome();

    inline _objref_ManipulatorCommonInterface_Middle()  { _PR_setobj(0); }  // nil
    _objref_ManipulatorCommonInterface_Middle(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_ManipulatorCommonInterface_Middle();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_ManipulatorCommonInterface_Middle(const _objref_ManipulatorCommonInterface_Middle&);
    _objref_ManipulatorCommonInterface_Middle& operator = (const _objref_ManipulatorCommonInterface_Middle&);
    // not implemented

    friend class ManipulatorCommonInterface_Middle;
  };

  class _pof_ManipulatorCommonInterface_Middle : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_ManipulatorCommonInterface_Middle() : _OMNI_NS(proxyObjectFactory)(ManipulatorCommonInterface_Middle::_PD_repoId) {}
    virtual ~_pof_ManipulatorCommonInterface_Middle();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_ManipulatorCommonInterface_Middle :
    public virtual omniServant
  {
  public:
    virtual ~_impl_ManipulatorCommonInterface_Middle();

    virtual RETURN_ID* closeGripper() = 0;
    virtual RETURN_ID* getBaseOffset(::JARA_ARM::HgMatrix offset) = 0;
    virtual RETURN_ID* getFeedbackPosCartesian(::JARA_ARM::CarPosWithElbow& pos) = 0;
    virtual RETURN_ID* getMaxSpeedCartesian(::JARA_ARM::CartesianSpeed& speed) = 0;
    virtual RETURN_ID* getMaxSpeedJoint(::JARA_ARM::DoubleSeq_out speed) = 0;
    virtual RETURN_ID* getMinAccelTimeCartesian(::CORBA::Double& aclTime) = 0;
    virtual RETURN_ID* getMinAccelTimeJoint(::CORBA::Double& aclTime) = 0;
    virtual RETURN_ID* getSoftLimitCartesian(::JARA_ARM::LimitValue& xLimit, ::JARA_ARM::LimitValue& yLimit, ::JARA_ARM::LimitValue& zLimit) = 0;
    virtual RETURN_ID* moveGripper(::JARA_ARM::ULONG angleRatio) = 0;
    virtual RETURN_ID* moveLinearCartesianAbs(const ::JARA_ARM::CarPosWithElbow& carPoint) = 0;
    virtual RETURN_ID* moveLinearCartesianRel(const ::JARA_ARM::CarPosWithElbow& carPoint) = 0;
    virtual RETURN_ID* movePTPCartesianAbs(const ::JARA_ARM::CarPosWithElbow& carPoint) = 0;
    virtual RETURN_ID* movePTPCartesianRel(const ::JARA_ARM::CarPosWithElbow& carPoint) = 0;
    virtual RETURN_ID* movePTPJointAbs(const ::JARA_ARM::JointPos& jointPoints) = 0;
    virtual RETURN_ID* movePTPJointRel(const ::JARA_ARM::JointPos& jointPoints) = 0;
    virtual RETURN_ID* openGripper() = 0;
    virtual RETURN_ID* pause() = 0;
    virtual RETURN_ID* resume() = 0;
    virtual RETURN_ID* stop() = 0;
    virtual RETURN_ID* setAccelTimeCartesian(::CORBA::Double aclTime) = 0;
    virtual RETURN_ID* setAccelTimeJoint(::CORBA::Double aclTime) = 0;
    virtual RETURN_ID* setBaseOffset(const ::JARA_ARM::HgMatrix offset) = 0;
    virtual RETURN_ID* setControlPointOffset(const ::JARA_ARM::HgMatrix offset) = 0;
    virtual RETURN_ID* setMaxSpeedCartesian(const ::JARA_ARM::CartesianSpeed& speed) = 0;
    virtual RETURN_ID* setMaxSpeedJoint(const ::JARA_ARM::DoubleSeq& speed) = 0;
    virtual RETURN_ID* setMinAccelTimeCartesian(::CORBA::Double aclTime) = 0;
    virtual RETURN_ID* setMinAccelTimeJoint(::CORBA::Double aclTime) = 0;
    virtual RETURN_ID* setSoftLimitCartesian(const ::JARA_ARM::LimitValue& xLimit, const ::JARA_ARM::LimitValue& yLimit, const ::JARA_ARM::LimitValue& zLimit) = 0;
    virtual RETURN_ID* setSpeedCartesian(::JARA_ARM::ULONG spdRatio) = 0;
    virtual RETURN_ID* setSpeedJoint(::JARA_ARM::ULONG spdRatio) = 0;
    virtual RETURN_ID* moveCircularCartesianAbs(const ::JARA_ARM::CarPosWithElbow& carPointR, const ::JARA_ARM::CarPosWithElbow& carPointT) = 0;
    virtual RETURN_ID* moveCircularCartesianRel(const ::JARA_ARM::CarPosWithElbow& carPointR, const ::JARA_ARM::CarPosWithElbow& carPointT) = 0;
    virtual RETURN_ID* setHome(const ::JARA_ARM::JointPos& jointPoint) = 0;
    virtual RETURN_ID* getHome(::JARA_ARM::JointPos_out jointPoint) = 0;
    virtual RETURN_ID* goHome() = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ManipulatorCommonInterface_Middle;

_CORBA_MODULE_END



_CORBA_MODULE POA_JARA_ARM
_CORBA_MODULE_BEG

  class ManipulatorCommonInterface_Middle :
    public virtual JARA_ARM::_impl_ManipulatorCommonInterface_Middle,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~ManipulatorCommonInterface_Middle();

    inline ::JARA_ARM::ManipulatorCommonInterface_Middle_ptr _this() {
      return (::JARA_ARM::ManipulatorCommonInterface_Middle_ptr) _do_this(::JARA_ARM::ManipulatorCommonInterface_Middle::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_JARA_ARM
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

void operator<<=(::CORBA::Any& _a, const JARA_ARM::HgMatrix_forany& _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, JARA_ARM::HgMatrix_forany& _s);

extern void operator<<=(::CORBA::Any& _a, const JARA_ARM::CarPosWithElbow& _s);
extern void operator<<=(::CORBA::Any& _a, JARA_ARM::CarPosWithElbow* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, JARA_ARM::CarPosWithElbow*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const JARA_ARM::CarPosWithElbow*& _sp);

extern void operator<<=(::CORBA::Any& _a, const JARA_ARM::CartesianSpeed& _s);
extern void operator<<=(::CORBA::Any& _a, JARA_ARM::CartesianSpeed* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, JARA_ARM::CartesianSpeed*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const JARA_ARM::CartesianSpeed*& _sp);

void operator<<=(::CORBA::Any& _a, JARA_ARM::ManipulatorCommonInterface_Middle_ptr _s);
void operator<<=(::CORBA::Any& _a, JARA_ARM::ManipulatorCommonInterface_Middle_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, JARA_ARM::ManipulatorCommonInterface_Middle_ptr& _s);



inline void
JARA_ARM::ManipulatorCommonInterface_Middle::_marshalObjRef(::JARA_ARM::ManipulatorCommonInterface_Middle_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_ManipulatorCommonInterface__MiddleLevel
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_ManipulatorCommonInterface__MiddleLevel
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_ManipulatorCommonInterface__MiddleLevel
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_ManipulatorCommonInterface__MiddleLevel
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_ManipulatorCommonInterface__MiddleLevel
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_ManipulatorCommonInterface__MiddleLevel
#endif

#endif  // __ManipulatorCommonInterface__MiddleLevel_hh__

