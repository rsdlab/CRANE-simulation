// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __ManipulatorCommonInterface__DataTypes_hh__
#define __ManipulatorCommonInterface__DataTypes_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_ManipulatorCommonInterface__DataTypes
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_ManipulatorCommonInterface__DataTypes
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_ManipulatorCommonInterface__DataTypes
#endif



#ifndef __BasicDataType_hh_EXTERNAL_GUARD__
#define __BasicDataType_hh_EXTERNAL_GUARD__
#include "BasicDataType.hh"
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE JARA_ARM

_CORBA_MODULE_BEG

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_DoubleSeq;

  class DoubleSeq_var;

  class DoubleSeq : public _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 >  {
  public:
    typedef DoubleSeq_var _var_type;
    inline DoubleSeq() {}
    inline DoubleSeq(const DoubleSeq& _s)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > (_s) {}

    inline DoubleSeq(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > (_max) {}
    inline DoubleSeq(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::Double* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > (_max, _len, _val, _rel) {}

  

    inline DoubleSeq& operator = (const DoubleSeq& _s) {
      _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > ::operator=(_s);
      return *this;
    }
  };

  class DoubleSeq_out;

  class DoubleSeq_var {
  public:
    inline DoubleSeq_var() : _pd_seq(0) {}
    inline DoubleSeq_var(DoubleSeq* _s) : _pd_seq(_s) {}
    inline DoubleSeq_var(const DoubleSeq_var& _s) {
      if( _s._pd_seq )  _pd_seq = new DoubleSeq(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~DoubleSeq_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline DoubleSeq_var& operator = (DoubleSeq* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline DoubleSeq_var& operator = (const DoubleSeq_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new DoubleSeq;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline ::CORBA::Double& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline DoubleSeq* operator -> () { return _pd_seq; }
    inline const DoubleSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator DoubleSeq& () const { return *_pd_seq; }
#else
    inline operator const DoubleSeq& () const { return *_pd_seq; }
    inline operator DoubleSeq& () { return *_pd_seq; }
#endif
      
    inline const DoubleSeq& in() const { return *_pd_seq; }
    inline DoubleSeq&       inout()    { return *_pd_seq; }
    inline DoubleSeq*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline DoubleSeq* _retn() { DoubleSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class DoubleSeq_out;
    
  private:
    DoubleSeq* _pd_seq;
  };

  class DoubleSeq_out {
  public:
    inline DoubleSeq_out(DoubleSeq*& _s) : _data(_s) { _data = 0; }
    inline DoubleSeq_out(DoubleSeq_var& _s)
      : _data(_s._pd_seq) { _s = (DoubleSeq*) 0; }
    inline DoubleSeq_out(const DoubleSeq_out& _s) : _data(_s._data) {}
    inline DoubleSeq_out& operator = (const DoubleSeq_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline DoubleSeq_out& operator = (DoubleSeq* _s) {
      _data = _s;
      return *this;
    }
    inline operator DoubleSeq*&()  { return _data; }
    inline DoubleSeq*& ptr()       { return _data; }
    inline DoubleSeq* operator->() { return _data; }

    inline ::CORBA::Double& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    DoubleSeq*& _data;

  private:
    DoubleSeq_out();
    DoubleSeq_out& operator=(const DoubleSeq_var&);
  };

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_JointPos;

  class JointPos_var;

  class JointPos : public _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 >  {
  public:
    typedef JointPos_var _var_type;
    inline JointPos() {}
    inline JointPos(const JointPos& _s)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > (_s) {}

    inline JointPos(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > (_max) {}
    inline JointPos(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::Double* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > (_max, _len, _val, _rel) {}

  

    inline JointPos& operator = (const JointPos& _s) {
      _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > ::operator=(_s);
      return *this;
    }
  };

  class JointPos_out;

  class JointPos_var {
  public:
    inline JointPos_var() : _pd_seq(0) {}
    inline JointPos_var(JointPos* _s) : _pd_seq(_s) {}
    inline JointPos_var(const JointPos_var& _s) {
      if( _s._pd_seq )  _pd_seq = new JointPos(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~JointPos_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline JointPos_var& operator = (JointPos* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline JointPos_var& operator = (const JointPos_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new JointPos;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline ::CORBA::Double& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline JointPos* operator -> () { return _pd_seq; }
    inline const JointPos* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator JointPos& () const { return *_pd_seq; }
#else
    inline operator const JointPos& () const { return *_pd_seq; }
    inline operator JointPos& () { return *_pd_seq; }
#endif
      
    inline const JointPos& in() const { return *_pd_seq; }
    inline JointPos&       inout()    { return *_pd_seq; }
    inline JointPos*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline JointPos* _retn() { JointPos* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class JointPos_out;
    
  private:
    JointPos* _pd_seq;
  };

  class JointPos_out {
  public:
    inline JointPos_out(JointPos*& _s) : _data(_s) { _data = 0; }
    inline JointPos_out(JointPos_var& _s)
      : _data(_s._pd_seq) { _s = (JointPos*) 0; }
    inline JointPos_out(const JointPos_out& _s) : _data(_s._data) {}
    inline JointPos_out& operator = (const JointPos_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline JointPos_out& operator = (JointPos* _s) {
      _data = _s;
      return *this;
    }
    inline operator JointPos*&()  { return _data; }
    inline JointPos*& ptr()       { return _data; }
    inline JointPos* operator->() { return _data; }

    inline ::CORBA::Double& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    JointPos*& _data;

  private:
    JointPos_out();
    JointPos_out& operator=(const JointPos_var&);
  };

  struct LimitValue {
    typedef _CORBA_ConstrType_Fix_Var<LimitValue> _var_type;

    
    ::CORBA::Double upper;

    ::CORBA::Double lower;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef LimitValue::_var_type LimitValue_var;

  typedef LimitValue& LimitValue_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_LimitValue;

  struct RETURN_ID {
    typedef _CORBA_ConstrType_Variable_Var<RETURN_ID> _var_type;

    
    ::CORBA::Long id;

    ::CORBA::String_member comment;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef RETURN_ID::_var_type RETURN_ID_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< RETURN_ID,RETURN_ID_var > RETURN_ID_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_RETURN_ID;

  _CORBA_MODULE_VARINT const ::CORBA::Long OK _init_in_decl_( = 0 );

  _CORBA_MODULE_VARINT const ::CORBA::Long NG _init_in_decl_( = -1 );

  _CORBA_MODULE_VARINT const ::CORBA::Long STATUS_ERR _init_in_decl_( = -2 );

  _CORBA_MODULE_VARINT const ::CORBA::Long VALUE_ERR _init_in_decl_( = -3 );

  _CORBA_MODULE_VARINT const ::CORBA::Long NOT_SV_ON_ERR _init_in_decl_( = -4 );

  _CORBA_MODULE_VARINT const ::CORBA::Long FULL_MOTION_QUEUE_ERR _init_in_decl_( = -5 );

  _CORBA_MODULE_VARINT const ::CORBA::Long NOT_IMPLEMENTED _init_in_decl_( = -6 );

  struct TimedJointPos {
    typedef _CORBA_ConstrType_Variable_Var<TimedJointPos> _var_type;

    
    RTC::Time tm;

    JointPos pos;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef TimedJointPos::_var_type TimedJointPos_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< TimedJointPos,TimedJointPos_var > TimedJointPos_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_TimedJointPos;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ULONG;

  typedef ::CORBA::ULong ULONG;
  typedef ::CORBA::ULong_out ULONG_out;

_CORBA_MODULE_END



_CORBA_MODULE POA_JARA_ARM
_CORBA_MODULE_BEG

_CORBA_MODULE_END



_CORBA_MODULE OBV_JARA_ARM
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

void operator<<=(::CORBA::Any& _a, const JARA_ARM::DoubleSeq& _s);
void operator<<=(::CORBA::Any& _a, JARA_ARM::DoubleSeq* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, JARA_ARM::DoubleSeq*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const JARA_ARM::DoubleSeq*& _sp);

void operator<<=(::CORBA::Any& _a, const JARA_ARM::JointPos& _s);
void operator<<=(::CORBA::Any& _a, JARA_ARM::JointPos* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, JARA_ARM::JointPos*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const JARA_ARM::JointPos*& _sp);

extern void operator<<=(::CORBA::Any& _a, const JARA_ARM::LimitValue& _s);
extern void operator<<=(::CORBA::Any& _a, JARA_ARM::LimitValue* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, JARA_ARM::LimitValue*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const JARA_ARM::LimitValue*& _sp);

extern void operator<<=(::CORBA::Any& _a, const JARA_ARM::RETURN_ID& _s);
extern void operator<<=(::CORBA::Any& _a, JARA_ARM::RETURN_ID* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, JARA_ARM::RETURN_ID*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const JARA_ARM::RETURN_ID*& _sp);

extern void operator<<=(::CORBA::Any& _a, const JARA_ARM::TimedJointPos& _s);
extern void operator<<=(::CORBA::Any& _a, JARA_ARM::TimedJointPos* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, JARA_ARM::TimedJointPos*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const JARA_ARM::TimedJointPos*& _sp);





#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_ManipulatorCommonInterface__DataTypes
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_ManipulatorCommonInterface__DataTypes
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_ManipulatorCommonInterface__DataTypes
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_ManipulatorCommonInterface__DataTypes
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_ManipulatorCommonInterface__DataTypes
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_ManipulatorCommonInterface__DataTypes
#endif

#endif  // __ManipulatorCommonInterface__DataTypes_hh__

