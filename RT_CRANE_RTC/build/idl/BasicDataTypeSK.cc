// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "BasicDataType.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



void
RTC::Time::operator>>= (cdrStream &_n) const
{
  sec >>= _n;
  nsec >>= _n;

}

void
RTC::Time::operator<<= (cdrStream &_n)
{
  (::CORBA::ULong&)sec <<= _n;
  (::CORBA::ULong&)nsec <<= _n;

}

void
RTC::TimedState::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  data >>= _n;

}

void
RTC::TimedState::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (::CORBA::Short&)data <<= _n;

}

void
RTC::TimedShort::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  data >>= _n;

}

void
RTC::TimedShort::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (::CORBA::Short&)data <<= _n;

}

void
RTC::TimedLong::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  data >>= _n;

}

void
RTC::TimedLong::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (::CORBA::Long&)data <<= _n;

}

void
RTC::TimedUShort::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  data >>= _n;

}

void
RTC::TimedUShort::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (::CORBA::UShort&)data <<= _n;

}

void
RTC::TimedULong::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  data >>= _n;

}

void
RTC::TimedULong::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (::CORBA::ULong&)data <<= _n;

}

void
RTC::TimedFloat::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  data >>= _n;

}

void
RTC::TimedFloat::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (::CORBA::Float&)data <<= _n;

}

void
RTC::TimedDouble::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  data >>= _n;

}

void
RTC::TimedDouble::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (::CORBA::Double&)data <<= _n;

}

void
RTC::TimedChar::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  _n.marshalChar(data);

}

void
RTC::TimedChar::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  data = _n.unmarshalChar();

}

void
RTC::TimedWChar::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  _n.marshalWChar(data);

}

void
RTC::TimedWChar::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  data = _n.unmarshalWChar();

}

void
RTC::TimedBoolean::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  _n.marshalBoolean(data);

}

void
RTC::TimedBoolean::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  data = _n.unmarshalBoolean();

}

void
RTC::TimedOctet::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  _n.marshalOctet(data);

}

void
RTC::TimedOctet::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  data = _n.unmarshalOctet();

}

void
RTC::TimedString::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  _n.marshalString(data,0);

}

void
RTC::TimedString::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  data = _n.unmarshalString(0);

}

void
RTC::TimedWString::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  _n.marshalWString(data,0);

}

void
RTC::TimedWString::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  data = _n.unmarshalWString(0);

}

void
RTC::TimedShortSeq::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  (const _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Short, 2, 2 > &) data >>= _n;

}

void
RTC::TimedShortSeq::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (_CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Short, 2, 2 > &)data <<= _n;

}

void
RTC::TimedLongSeq::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  (const _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 > &) data >>= _n;

}

void
RTC::TimedLongSeq::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (_CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 > &)data <<= _n;

}

void
RTC::TimedUShortSeq::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  (const _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::UShort, 2, 2 > &) data >>= _n;

}

void
RTC::TimedUShortSeq::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (_CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::UShort, 2, 2 > &)data <<= _n;

}

void
RTC::TimedULongSeq::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  (const _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > &) data >>= _n;

}

void
RTC::TimedULongSeq::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (_CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > &)data <<= _n;

}

void
RTC::TimedFloatSeq::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  (const _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Float, 4, 4 > &) data >>= _n;

}

void
RTC::TimedFloatSeq::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (_CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Float, 4, 4 > &)data <<= _n;

}

void
RTC::TimedDoubleSeq::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  (const _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > &) data >>= _n;

}

void
RTC::TimedDoubleSeq::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (_CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > &)data <<= _n;

}

void
RTC::TimedCharSeq::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  (const _CORBA_Unbounded_Sequence_Char&) data >>= _n;

}

void
RTC::TimedCharSeq::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (_CORBA_Unbounded_Sequence_Char&)data <<= _n;

}

void
RTC::TimedWCharSeq::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  (const _CORBA_Unbounded_Sequence_WChar&) data >>= _n;

}

void
RTC::TimedWCharSeq::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (_CORBA_Unbounded_Sequence_WChar&)data <<= _n;

}

void
RTC::TimedBooleanSeq::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  (const _CORBA_Unbounded_Sequence_Boolean&) data >>= _n;

}

void
RTC::TimedBooleanSeq::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (_CORBA_Unbounded_Sequence_Boolean&)data <<= _n;

}

void
RTC::TimedOctetSeq::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  (const _CORBA_Unbounded_Sequence_Octet&) data >>= _n;

}

void
RTC::TimedOctetSeq::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (_CORBA_Unbounded_Sequence_Octet&)data <<= _n;

}

void
RTC::TimedStringSeq::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  (const _CORBA_Unbounded_Sequence_String&) data >>= _n;

}

void
RTC::TimedStringSeq::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (_CORBA_Unbounded_Sequence_String&)data <<= _n;

}

void
RTC::TimedWStringSeq::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  (const _CORBA_Unbounded_Sequence_WString&) data >>= _n;

}

void
RTC::TimedWStringSeq::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (_CORBA_Unbounded_Sequence_WString&)data <<= _n;

}

